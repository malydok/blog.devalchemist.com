webpackJsonp([0x938e12336a86],{379:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Devilish Alchemist's Blog",author:"Marek Pietrzak"}},markdownRemark:{id:"C:/Users/Dell XPS 13/Documents/Random/malydok.github.io/src/pages/2019-05-06-zmienne-i-referencje/index.md absPath of file >>> MarkdownRemark",html:'<p>Zadano mi dziś ciekawe pytanie. Zerknijcie na kod i zobaczcie, czy jego rozszyfrowanie sprawia wam trudność:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  color<span class="token punctuation">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reassign</span> <span class="token operator">=</span> b <span class="token operator">=></span> <span class="token punctuation">{</span>\n  b <span class="token operator">=</span> <span class="token punctuation">{</span>\n    size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">reassign</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span></code></pre>\n      </div>\n<p>I jak?</p>\n<p>Dlaczego <code class="language-text">a</code> nie jest nadpisane nowym obiektem?</p>\n<p>Każdy ucząc się JS słyszał zapewne o tym, jak to obiekty przekazywane są do funkcji przez referencję. Jednak co to tak naprawdę znaczy i czy mamy z tym do czynienia w powyższym przypadku?</p>\n<h2>Przeanalizujmy kod krok po kroku</h2>\n<ol>\n<li>deklarujemy zmienną <code class="language-text">a</code>, nadając jej wartość obiektu, gdzie ta wartość to tak naprawdę wskaźnik na miejsce w pamięci, gdzie ten obiekt się znajduje,</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Zmienne     Pamięć\na _________ { color: &#39;red&#39; }</code></pre>\n      </div>\n<ol start="2">\n<li>deklarujemy zmienną <code class="language-text">reassign</code>, nadając jej jako wartość funkcję,</li>\n<li>wywołujemy <code class="language-text">reassign</code> podając <code class="language-text">a</code> jako parametr,</li>\n<li>tworzy się nowy kontekst wywołania, deklaruje zmienną <code class="language-text">b</code> i ustawia jej wartość na wartość <code class="language-text">a</code>, czyli <code class="language-text">b</code> wskazuje teraz na ten sam obiekt, co <code class="language-text">a</code>,</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Zmienne     Pamięć\na _________ { color: &#39;red&#39; }\nb _________/</code></pre>\n      </div>\n<ol start="5">\n<li>przypisuje do <code class="language-text">b</code> nowy wskaźnik na nowo utworzony obiekt,</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Zmienne     Pamięć\na _________ { color: &#39;red&#39; }\nb _________ { size: 10 }</code></pre>\n      </div>\n<ol start="6">\n<li>loguje <code class="language-text">b</code>, kończy się wywołanie funkcji, loguje <code class="language-text">a</code>.</li>\n</ol>\n<p>Nie pozostaje już chyba żadna wątpliwość, co zostanie wyplute do konsoli. Czy skorzystaliśmy tu jednak z faktu, że obiekty przekazywane są do funkcji jako referencje? Ano nie bardzo, ale mogliśmy.</p>\n<p>Przed krokiem 5, kiedy <code class="language-text">b</code> wskazuje jeszcze na pierwszy obiekt, moglibyśmy ten obiekt zmodyfikować, np. tak:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">b<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { color: \'red\', size: 10 }</span></code></pre>\n      </div>\n<p>Trzeba rozdzielić myślenie o nazwach zmiennych i ich wartościach. W problemie nie dotykamy wartości obiektu (referencji), a zajmujemy się tylko zmienną <code class="language-text">b</code> modyfikując na co ma wskazywać. Warto mieć w głowie model zmiennych i pamięci jak zademonstrowany w krokach wyżej.</p>\n<h2>Bez obiektów</h2>\n<p>Powiedzmy, że zmodyfikuję nasz problem w następujący sposób:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reassign</span> <span class="token operator">=</span> b <span class="token operator">=></span> <span class="token punctuation">{</span>\n  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">reassign</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Zniknęły obiekty, nie ma referencji. Jaki będzie wynik?</p>\n<p>Taki sam, bo w zasadzie co się zmieniło? Tyle, że zamiast podmieniać w <code class="language-text">b</code> referencje obiektów podmieniamy faktyczne niemutowalne wartości liczbowe, więc stan po kroku 4 wygląda tak:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Zmienne     Pamięć\na _________ 1\nb _________ 1</code></pre>\n      </div>\n<h2>Patrz na scope</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reassign</span> <span class="token operator">=</span> a <span class="token operator">=></span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">reassign</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Czy powyższa zmiana <code class="language-text">b</code> na <code class="language-text">a</code> wewnątrz funkcji zmienia cokolwiek w programie?</p>\n<p>Nie, wewnętrzne <code class="language-text">a</code> istnieje w innym scope od <code class="language-text">a</code> zewnętrznego i dostęp do nich zależy od kontekstu wywołania, w którym aktualnie przebywa program. W trakcie wywołania <code class="language-text">reassign</code> będzie to <code class="language-text">1 -&gt; 2</code>, a w globalnym konteście zawsze <code class="language-text">1</code>.</p>',frontmatter:{title:"Zmienne i przekazywanie przez referencję w JS",date:"06 May, 2019"}}},pathContext:{slug:"/2019-05-06-zmienne-i-referencje/",previous:{fields:{slug:"/2019-05-03-jak-twoj-mozg-powstrzymuje-cie-przed-rozwojem/"},frontmatter:{title:"Jak twój mózg powstrzymuje cię przed rozwojem"}},next:null}}}});
//# sourceMappingURL=path---2019-05-06-zmienne-i-referencje-62074a3563f032e56567.js.map