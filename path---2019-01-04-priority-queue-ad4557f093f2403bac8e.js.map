{"version":3,"sources":["webpack:///path---2019-01-04-priority-queue-ad4557f093f2403bac8e.js","webpack:///./.cache/json/2019-01-04-priority-queue.json"],"names":["webpackJsonp","376","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,4BAAAC,OAAA,mBAA+DC,gBAAmBC,GAAA,iIAAAC,KAAA,wlEAAo0DC,aAAofL,MAAA,6CAAAM,KAAA,sBAAiFC,aAAgBC,KAAA,8BAAAC,UAAiDC,QAAUF,KAAA,kCAAwCH,aAAgBL,MAAA,0DAAiEW,KAAA","file":"path---2019-01-04-priority-queue-ad4557f093f2403bac8e.js","sourcesContent":["webpackJsonp([233673577482134],{\n\n/***/ 376:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Devilish Alchemist's Blog\",\"author\":\"Marek Pietrzak\"}},\"markdownRemark\":{\"id\":\"C:/Users/Dell XPS 13/Desktop/malydok.github.io/src/pages/2019-01-04-priority-queue/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>A small coding challenge for today: implement a priority queue in JavaScript. You may use the standard array, I’m not forcing you to reinvent a queue.</p>\\n<p>How does a priority queue differ from a regular one? The values added to it have a weight (priority) by which they’re ordered and then retrieved.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> queue <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">PriorityQueue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nqueue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nqueue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nqueue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The expected outcome of then calling <code class=\\\"language-text\\\">pop()</code> three times would be <code class=\\\"language-text\\\">c, a, b</code>.</p>\\n<p>This sort of construct is needed to implement the Dijkstra’s algorithm - prioritized path finding. Read more about those in <a href=\\\"https://www.redblobgames.com/pathfinding/a-star/introduction.html\\\">this excellent article</a>. I don’t do game development, but this stuff is awesome.</p>\",\"frontmatter\":{\"title\":\"Easy JavaScript excercise - priority queue\",\"date\":\"04 January, 2018\"}}},\"pathContext\":{\"slug\":\"/2019-01-04-priority-queue/\",\"previous\":{\"fields\":{\"slug\":\"/2014-11-15-ie-selector-limit/\"},\"frontmatter\":{\"title\":\"Remember about the count limit of CSS selectors in IE\"}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2019-01-04-priority-queue-ad4557f093f2403bac8e.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Devilish Alchemist's Blog\",\"author\":\"Marek Pietrzak\"}},\"markdownRemark\":{\"id\":\"C:/Users/Dell XPS 13/Desktop/malydok.github.io/src/pages/2019-01-04-priority-queue/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>A small coding challenge for today: implement a priority queue in JavaScript. You may use the standard array, I’m not forcing you to reinvent a queue.</p>\\n<p>How does a priority queue differ from a regular one? The values added to it have a weight (priority) by which they’re ordered and then retrieved.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> queue <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">PriorityQueue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nqueue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nqueue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nqueue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The expected outcome of then calling <code class=\\\"language-text\\\">pop()</code> three times would be <code class=\\\"language-text\\\">c, a, b</code>.</p>\\n<p>This sort of construct is needed to implement the Dijkstra’s algorithm - prioritized path finding. Read more about those in <a href=\\\"https://www.redblobgames.com/pathfinding/a-star/introduction.html\\\">this excellent article</a>. I don’t do game development, but this stuff is awesome.</p>\",\"frontmatter\":{\"title\":\"Easy JavaScript excercise - priority queue\",\"date\":\"04 January, 2018\"}}},\"pathContext\":{\"slug\":\"/2019-01-04-priority-queue/\",\"previous\":{\"fields\":{\"slug\":\"/2014-11-15-ie-selector-limit/\"},\"frontmatter\":{\"title\":\"Remember about the count limit of CSS selectors in IE\"}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2019-01-04-priority-queue.json\n// module id = 376\n// module chunks = 233673577482134"],"sourceRoot":""}