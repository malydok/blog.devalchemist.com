<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Devilish Alchemist's Blog]]></title><description><![CDATA[Front-end musings and stuff]]></description><link>https://blog.devalchemist.com</link><generator>RSS for Node</generator><lastBuildDate>Thu, 09 May 2019 10:15:44 GMT</lastBuildDate><item><title><![CDATA[Zmienne i przekazywanie przez referencję w JS]]></title><description><![CDATA[Zadano mi dziś ciekawe pytanie. Zerknijcie na kod i zobaczcie, czy jego rozszyfrowanie sprawia wam trudność:I jak?Dlaczego  nie jest…]]></description><link>https://blog.devalchemist.com/2019-05-06-zmienne-i-referencje/</link><guid isPermaLink="false">https://blog.devalchemist.com/2019-05-06-zmienne-i-referencje/</guid><pubDate>Mon, 06 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Zadano mi dziś ciekawe pytanie. Zerknijcie na kod i zobaczcie, czy jego rozszyfrowanie sprawia wam trudność:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reassign&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ?&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;reassign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I jak?&lt;/p&gt;
&lt;p&gt;Dlaczego &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; nie jest nadpisane nowym obiektem, przecież &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; powinno być równe &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Każdy ucząc się JS słyszał zapewne o tym, jak to obiekty przekazywane są do funkcji przez referencję. Jednak czy mamy z tym do czynienia w powyższym przypadku?&lt;/p&gt;
&lt;p&gt;Nie mamy. Chodzi tu tylko o zmianę wartości zmiennej.&lt;/p&gt;
&lt;h2&gt;Przeanalizujmy kod linia po linii&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;deklarujemy zmienną &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;, nadając jej wartość obiektu, gdzie ta wartość to tak naprawdę wskaźnik na miejsce w pamięci, gdzie ten obiekt się znajduje,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Zmienne     Pamięć
a _________ { color: &amp;#39;red&amp;#39; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;deklarujemy zmienną &lt;code class=&quot;language-text&quot;&gt;reassign&lt;/code&gt;, nadając jej jako wartość funkcję,&lt;/li&gt;
&lt;li&gt;wywołujemy &lt;code class=&quot;language-text&quot;&gt;reassign&lt;/code&gt; podając &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; jako parametr,&lt;/li&gt;
&lt;li&gt;tworzy się nowy &lt;a href=&quot;https://www.youtube.com/watch?v=Hb0RG60gwh8&quot;&gt;kontekst wywołania&lt;/a&gt;, &lt;strong&gt;deklaruje zmienną&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; i ustawia jej wartość na wartość &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;, czyli &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; wskazuje teraz na ten sam obiekt, co &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Zmienne     Pamięć
a _________ { color: &amp;#39;red&amp;#39; }
b _________/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;przypisuje do &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; nowy wskaźnik na nowo utworzony obiekt,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Zmienne     Pamięć
a _________ { color: &amp;#39;red&amp;#39; }
b _________ { size: 10 }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;loguje &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt;, kończy się wywołanie funkcji, loguje &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nie pozostaje już chyba żadna wątpliwość, co zostanie wyplute do konsoli. Czy skorzystaliśmy tu jednak z faktu, że obiekty przekazywane są do funkcji jako referencje? Nie, ale mogliśmy przed krokiem 5, kiedy &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; wskazywał jeszcze na pierwszy obiekt i można go było zmodyfikować, np. tak:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { color: &apos;red&apos;, size: 10 }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nowością dla początkującego może być fakt, że przekazanie do funkcji zmiennej &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; nie jest równoważne temu, że &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; &lt;em&gt;będzie&lt;/em&gt; zmienną &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;. Nie, jest to osobna zmienna stworzona na potrzeby tej funkcji. Można sobie to wyobrazić tak:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reassign&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token comment&quot;&gt;// to się dzieje automagicznie!&lt;/span&gt;
  b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;reassign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Trzeba rozdzielić myślenie o nazwach zmiennych i ich wartościach. W problemie nie dotykamy wartości obiektu (referencji), a zajmujemy się tylko zmienną &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; modyfikując na co ma wskazywać. Warto mieć w głowie model zmiennych i pamięci jak zademonstrowany w krokach wyżej.&lt;/p&gt;
&lt;h2&gt;Bez obiektów&lt;/h2&gt;
&lt;p&gt;Powiedzmy, że zmodyfikuję nasz problem w następujący sposób:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reassign&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;reassign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zniknęły obiekty, nie ma referencji. Jaki będzie wynik?&lt;/p&gt;
&lt;p&gt;Taki sam, bo w zasadzie zmieniło się tylko tyle, że zamiast wskazywać na obiekt wskazujemy teraz na liczbę.&lt;/p&gt;
&lt;h2&gt;Patrz na kontekst wywołania i zasięg zmiennych&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reassign&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;reassign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Czy powyższa zmiana &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; na &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; wewnątrz funkcji zmienia cokolwiek w programie?&lt;/p&gt;
&lt;p&gt;Nie, wewnętrzne &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; istnieje w innym scope od &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; zewnętrznego i dostęp do nich zależy od kontekstu wywołania, w którym aktualnie przebywa program. W trakcie wywołania &lt;code class=&quot;language-text&quot;&gt;reassign&lt;/code&gt; będzie to &lt;code class=&quot;language-text&quot;&gt;1 -&amp;gt; 2&lt;/code&gt;, a w globalnym kontekście zawsze &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Zrozumienie kontekstu (execution context), zasięgu zmiennych (scope) i jak te zmienne są przechowywane w pamięci to bardzo ważna wiedza przy zabawie z JS. Nie jest to specjalnie trudne bez wchodzenia w szczegóły, a zrozumienie tutaj przełoży się na łatwiejsze przyswojenie mechanizmu domknięć (closure).&lt;/p&gt;
&lt;h2&gt;Przykład z tyłka&lt;/h2&gt;
&lt;p&gt;Jeśli rozumiecie ten pierwszy problem to zobaczycie też, że nie ma on zupełnie sensu w realnym świecie a przynajmniej zapala czerwone lampki poprawności kodu. Nadpisanie wartości argumentu zaraz po jego otrzymaniu w funkcji - to na co mi ten argument?&lt;/p&gt;
&lt;p&gt;Może &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; powinno być zmienną wewnątrz funkcji?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reassign&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jeśli chcielibyśmy nadpisać zmienną poza funkcją moglibyśmy napisać tak:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reassign&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;reassign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jednak &lt;code class=&quot;language-text&quot;&gt;reassign&lt;/code&gt; ma teraz wpływ na rzeczy poza jej scope (posiada side-effecty) przez co jest trudniejsza do zrozumienia i przetestowania, a kod do zdebugowania. A można:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reassign&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reassign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dzięki czemu &lt;code class=&quot;language-text&quot;&gt;reassign&lt;/code&gt; jest pure (bez side-effectów), a programiści &amp;#x3C;3 pure functions.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Mam nadzieję, że ten artykuł ma trochę sensu. Można mnie złapać i zadawać pytania na &lt;a href=&quot;https://discord.typeofweb.com/&quot;&gt;discordzie Type of Web&lt;/a&gt;, zapraszam.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jak twój mózg powstrzymuje cię przed rozwojem]]></title><description><![CDATA[“Fajnie byłoby nauczyć się czegoś nowego, może stworzyć jakąś gierkę czy napisać artykuł na bloga. Co jednak wybrać, co robić, o czym pisać…]]></description><link>https://blog.devalchemist.com/2019-05-03-jak-twoj-mozg-powstrzymuje-cie-przed-rozwojem/</link><guid isPermaLink="false">https://blog.devalchemist.com/2019-05-03-jak-twoj-mozg-powstrzymuje-cie-przed-rozwojem/</guid><pubDate>Fri, 03 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;“Fajnie byłoby nauczyć się czegoś nowego, może stworzyć jakąś gierkę czy napisać artykuł na bloga. Co jednak wybrać, co robić, o czym pisać?”
Większość z nas była w tym miejscu. Większość z nas nie zrealizowała tych aspiracji. Dlaczego?&lt;/p&gt;
&lt;p&gt;Patrząc po sobie zdaje mi się, że najczęstszym powodem jest chwilowość inspiracji, brak świadomego wyboru, który umożliwiłby długoterminowe wykonanie danego postanowienia. By tę ulotną inspirację przekuć w faktyczny projekt wypadałoby racjonalniej podejść do problemu, przemyśleć go nieco dokładniej, zaplanować. Blokować nas przed progresem mogą również myśli nie zawsze będące odzwierciedleniem rzeczywistości, a które dobrze poznać i zweryfikować.&lt;/p&gt;
&lt;p&gt;No dobrze, powiecie, chciałbym coś zrobić, ale nic jeszcze nie wiem a jest tyle możliwości. Jak wybrać najlepszą?&lt;/p&gt;
&lt;h2&gt;Paraliż decyzyjny&lt;/h2&gt;
&lt;p&gt;Współczesność ma swoje minusy. Informacje bombardują nas z lewa i prawa, od rana do nocy potrafimy konsumować je niemal bez przerwy. Dostęp do internetu to dostęp do bezkresu możliwości, co jest wspaniałe do momentu, w którym podjąć trzeba decyzję o wyborze frameworka do następnego projektu. Można w takim przypadku paść ofiarą &lt;a href=&quot;https://en.wikipedia.org/wiki/Overchoice&quot;&gt;paraliżu wyboru&lt;/a&gt;, gdzie większa liczba opcji prowadzi do większego &lt;a href=&quot;https://en.wikipedia.org/wiki/Cognitive_dissonance&quot;&gt;dyskomfortu psychicznego&lt;/a&gt; i strachu przed dokonaniem nieidealnego wyboru, co zakończyć się może brakiem tego wyboru w ogóle. Nawet po wybraniu czegoś nie jesteśmy bezpieczni, cały czas kwestionujemy tego zasadność gotowi w każdym momencie się poddać.&lt;/p&gt;
&lt;p&gt;Jak z tym walczyć?&lt;/p&gt;
&lt;p&gt;Rozpoznaj problem, &lt;a href=&quot;https://memegenerator.net/img/instances/500x/65932602/search-your-feelings.jpg&quot;&gt;przeszukaj swoje uczucia&lt;/a&gt;. Jeśli opcji jest za dużo, postaraj się je zredukować lub spytaj o radę innych (np. na &lt;a href=&quot;https://discord.typeofweb.com/&quot;&gt;Discordzie&lt;/a&gt;). Miej zaufanie do ostatecznego wyboru, może i nie jest najlepszy, ale na pewno wystarczająco dobry.&lt;/p&gt;
&lt;p&gt;Wszystko fajnie, powiecie, ale ja już wybrałem frameworka, nie mam tylko pojęcia co ciekawego mogę z nim zrobić!&lt;/p&gt;
&lt;h2&gt;Blokada twórcza&lt;/h2&gt;
&lt;p&gt;Pewnie każdy, kto próbował wymyślić coś oryginalnego, wie jak trudne to zadanie. Jak wymyślić coś, czego wcześniej jeszcze nie było? Jak wydumać zasady ogólnej teorii względności nie znając wcześniej zasad mechaniki klasycznej? Poza &lt;a href=&quot;https://en.wikipedia.org/wiki/Infinite_monkey_theorem&quot;&gt;nieśmiertelną małpą&lt;/a&gt; nie ma stworzenia do tego zdolnego.&lt;/p&gt;
&lt;p&gt;Nasze pomysły nie są stricte naszymi, są co najwyżej zniekształconymi odbiciami myśli innych. &lt;a href=&quot;https://vimeo.com/47322970&quot;&gt;Wszystko jest remiksem&lt;/a&gt;. Zrozumienie tego faktu pozwala wyzbyć się nierealistycznych wyobrażeń o swoich projektach. Skup się na rzeczach, które cię interesują, spróbuj, bez przesadnego wysilania się, połączyć je w mniej lub bardziej oczywisty sposób. Podziel się swoją wiedzą. To, co tobie wydaje się mało odkrywcze lub normalne, może być wartościowe dla innych. Zacznij od małych kroków i nie przesadzaj z dążeniem do perfekcji. &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&quot;&gt;Idealne jest wrogiem dobrego&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nie wiem po co piszę ten artykuł, przecież każdy to już wie, nie? Zresztą kim ja jestem, żeby próbować komukolwiek pomóc z czymś, z czym sam mam ogromny problem.&lt;/p&gt;
&lt;h2&gt;Niedowartościowanie&lt;/h2&gt;
&lt;p&gt;O &lt;a href=&quot;https://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;syndromie oszusta&lt;/a&gt; słyszał już pewnie każdy. Programiści są na niego o tyle bardziej narażeni, że ta branża wymaga nieustającej nauki i nigdy pozwala spocząć na laurach w rozwijaniu swoich umiejętności. Przez mnogość technologii i narzędzi wrażenie niekompetencji może być przesadnie wyolbrzymione, prowadząc do zaniżenia swojej faktycznej wartości. Pozytywnym jednak aspektem stwierdzenia w sobie tej przypadłości jest fakt, że paradoksalnie wskazuje ona na progres w tymże rozwoju, jako że świadoma niekompetencja jest drugim z &lt;a href=&quot;https://en.wikipedia.org/wiki/Four_stages_of_competence&quot;&gt;czterech etapów osiągnięcia kompetencji&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Swoją wiedzę najłatwiej zweryfikować w kontakcie z innymi. Czy to rozmawiając z koleżankami z pracy, czy na &lt;a href=&quot;https://discord.typeofweb.com/&quot;&gt;Discordzie&lt;/a&gt; czy nawet na rozmowie rekrutacyjnej. Uważaj przy tym na to, z kim się porównujesz, dobrze jakby były to osoby z różnym doświadczeniem. Pokaż swoje prace publicznie i bądź gotowy na konstruktywną krytykę, z pewnością ktoś ci jej udzieli.&lt;/p&gt;
&lt;h2&gt;Poznaj swój mózg… trochę&lt;/h2&gt;
&lt;p&gt;Nie musisz od razu być psychologiem ani znać naukowych nazw danych zjawisk aby rozpoznać je na codzień pojawiające się w umyśle. Ich znajomość to pierwszy krok do ich przeskoczenia, szczególnie w momentach, kiedy sama siła inspiracji nie jest w stanie. Miłej nauki i tworzenia!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Easy JavaScript excercise - priority queue]]></title><description><![CDATA[A small coding challenge for today: implement a priority queue in JavaScript. You may use the standard array, I’m not forcing you to…]]></description><link>https://blog.devalchemist.com/2019-01-04-priority-queue/</link><guid isPermaLink="false">https://blog.devalchemist.com/2019-01-04-priority-queue/</guid><pubDate>Fri, 04 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A small coding challenge for today: implement a priority queue in JavaScript. You may use the standard array, I’m not forcing you to reinvent a queue.&lt;/p&gt;
&lt;p&gt;How does a priority queue differ from a regular one? The values added to it have a weight (priority) by which they’re ordered and then retrieved.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The expected outcome of then calling &lt;code class=&quot;language-text&quot;&gt;pop()&lt;/code&gt; three times would be &lt;code class=&quot;language-text&quot;&gt;c, a, b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This sort of construct is needed to implement the Dijkstra’s algorithm - prioritized path finding. Read more about those in &lt;a href=&quot;https://www.redblobgames.com/pathfinding/a-star/introduction.html&quot;&gt;this excellent article&lt;/a&gt;. I don’t do game development, but this stuff is awesome.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Remember about the count limit of CSS selectors in IE]]></title><description><![CDATA[If you’ve ever included too many libraries into your CSS build you might have experienced the pure awesomeness of not knowing why your…]]></description><link>https://blog.devalchemist.com/2014-11-15-ie-selector-limit/</link><guid isPermaLink="false">https://blog.devalchemist.com/2014-11-15-ie-selector-limit/</guid><pubDate>Sat, 15 Nov 2014 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;If you’ve ever included too many libraries into your CSS build you might have experienced the pure awesomeness of not knowing why your styles disappear in IE 8 and 9 (if you still support the former). Things should be visible in the inspected code and they just aren’t there.&lt;/p&gt;
&lt;p&gt;The simple reason is the selector count limit. These favorite browsers of ours will only parse the first 4096 selectors and throw the rest out the window.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;The obvious and straightforward solution is to divide your CSS into smaller chunks. You can either do it by hand or if preprocessors are your thing (and they should be) use a nice piece of plugin magic like &lt;a href=&quot;http://blesscss.com/&quot;&gt;Bless&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Good luck in your fight. You’re not alone!&lt;/p&gt;</content:encoded></item></channel></rss>