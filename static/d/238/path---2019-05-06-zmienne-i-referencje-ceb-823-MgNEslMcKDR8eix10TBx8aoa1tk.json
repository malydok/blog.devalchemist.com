{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"458e6898-ccca-5c73-b2f6-5b19a722ea9f","excerpt":"Zadano mi dziś ciekawe pytanie. Zerknijcie na kod i zobaczcie, czy jego rozszyfrowanie sprawia wam trudność:I jak?Dlaczego  nie jest nadpisane nowym obiektem…","html":"<p>Zadano mi dziś ciekawe pytanie. Zerknijcie na kod i zobaczcie, czy jego rozszyfrowanie sprawia wam trudność:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reassign</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">b</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">reassign</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span></code></pre></div>\n<p>I jak?</p>\n<p>Dlaczego <code class=\"language-text\">a</code> nie jest nadpisane nowym obiektem, przecież <code class=\"language-text\">b</code> powinno być równe <code class=\"language-text\">a</code>?</p>\n<p>Każdy ucząc się JS słyszał zapewne o tym, jak to obiekty przekazywane są do funkcji przez referencję. Jednak czy mamy z tym do czynienia w powyższym przypadku?</p>\n<p>Nie mamy. Chodzi tu tylko o zmianę wartości zmiennej.</p>\n<h2>Przeanalizujmy kod linia po linii</h2>\n<ol>\n<li>deklarujemy zmienną <code class=\"language-text\">a</code>, nadając jej wartość obiektu, gdzie ta wartość to tak naprawdę wskaźnik na miejsce w pamięci, gdzie ten obiekt się znajduje,</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Zmienne     Pamięć\na _________ { color: &#39;red&#39; }</code></pre></div>\n<ol start=\"2\">\n<li>deklarujemy zmienną <code class=\"language-text\">reassign</code>, nadając jej jako wartość funkcję,</li>\n<li>wywołujemy <code class=\"language-text\">reassign</code> podając <code class=\"language-text\">a</code> jako parametr,</li>\n<li>tworzy się nowy <a href=\"https://www.youtube.com/watch?v=Hb0RG60gwh8\">kontekst wywołania</a>, <strong>deklaruje zmienną</strong> <code class=\"language-text\">b</code> i ustawia jej wartość na wartość <code class=\"language-text\">a</code>, czyli <code class=\"language-text\">b</code> wskazuje teraz na ten sam obiekt, co <code class=\"language-text\">a</code>,</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Zmienne     Pamięć\na _________ { color: &#39;red&#39; }\nb _________/</code></pre></div>\n<ol start=\"5\">\n<li>przypisuje do <code class=\"language-text\">b</code> nowy wskaźnik na nowo utworzony obiekt,</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Zmienne     Pamięć\na _________ { color: &#39;red&#39; }\nb _________ { size: 10 }</code></pre></div>\n<ol start=\"6\">\n<li>loguje <code class=\"language-text\">b</code>, kończy się wywołanie funkcji, loguje <code class=\"language-text\">a</code>.</li>\n</ol>\n<p>Nie pozostaje już chyba żadna wątpliwość, co zostanie wyplute do konsoli. Czy skorzystaliśmy tu jednak z faktu, że obiekty przekazywane są do funkcji jako referencje? Nie, ale mogliśmy przed krokiem 5, kiedy <code class=\"language-text\">b</code> wskazywał jeszcze na pierwszy obiekt i można go było zmodyfikować, np. tak:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">b<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { color: 'red', size: 10 }</span></code></pre></div>\n<p>Nowością dla początkującego może być fakt, że przekazanie do funkcji zmiennej <code class=\"language-text\">a</code> nie jest równoważne temu, że <code class=\"language-text\">b</code> <em>będzie</em> zmienną <code class=\"language-text\">a</code>. Nie, jest to osobna zmienna stworzona na potrzeby tej funkcji. Można sobie to wyobrazić tak:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reassign</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// to się dzieje automagicznie!</span>\n  b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">reassign</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Trzeba rozdzielić myślenie o nazwach zmiennych i ich wartościach. W problemie nie dotykamy wartości obiektu (referencji), a zajmujemy się tylko zmienną <code class=\"language-text\">b</code> modyfikując na co ma wskazywać. Warto mieć w głowie model zmiennych i pamięci jak zademonstrowany w krokach wyżej.</p>\n<h2>Bez obiektów</h2>\n<p>Powiedzmy, że zmodyfikuję nasz problem w następujący sposób:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reassign</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">b</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">reassign</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Zniknęły obiekty, nie ma referencji. Jaki będzie wynik?</p>\n<p>Taki sam, bo w zasadzie zmieniło się tylko tyle, że zamiast wskazywać na obiekt wskazujemy teraz na liczbę.</p>\n<h2>Patrz na kontekst wywołania i zasięg zmiennych</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reassign</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">reassign</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Czy powyższa zmiana <code class=\"language-text\">b</code> na <code class=\"language-text\">a</code> wewnątrz funkcji zmienia cokolwiek w programie?</p>\n<p>Nie, wewnętrzne <code class=\"language-text\">a</code> istnieje w innym scope od <code class=\"language-text\">a</code> zewnętrznego i dostęp do nich zależy od kontekstu wywołania, w którym aktualnie przebywa program. W trakcie wywołania <code class=\"language-text\">reassign</code> będzie to <code class=\"language-text\">1 -&gt; 2</code>, a w globalnym kontekście zawsze <code class=\"language-text\">1</code>.</p>\n<p>Zrozumienie kontekstu (execution context), zasięgu zmiennych (scope) i jak te zmienne są przechowywane w pamięci to bardzo ważna wiedza przy zabawie z JS. Nie jest to specjalnie trudne bez wchodzenia z szczegóły, a zrozumienie tutaj przełoży się na łatwiejsze przyswojenie mechanizmu domknięć (closure).</p>\n<h2>Przykład z tyłka</h2>\n<p>Jeśli rozumiecie ten pierwszy problem to zobaczycie też, że nie ma on zupełnie sensu w realnym świecie a przynajmniej zapala czerwone lampki poprawności kodu. Nadpisanie wartości argumentu zaraz po jego otrzymaniu w funkcji - to na co mi ten argument?</p>\n<p>Może <code class=\"language-text\">b</code> powinno być zmienną wewnątrz funkcji?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reassign</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jeśli chcielibyśmy nadpisać zmienną poza funkcją moglibyśmy napisać tak:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reassign</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">reassign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jednak <code class=\"language-text\">reassign</code> ma teraz wpływ na rzeczy poza jej scope (posiada side-effecty) przez co jest trudniejsza do zrozumienia i przetestowania, a kod do zdebugowania. A można:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reassign</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token function\">reassign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Dzięki czemu <code class=\"language-text\">reassign</code> jest pure (bez side-effectów), a programiści &#x3C;3 pure functions.</p>\n<hr>\n<p>Mam nadzieję, że ten artykuł ma trochę sensu. Można mnie złapać i zadawać pytania na <a href=\"https://discord.typeofweb.com/\">discordzie Type of Web</a>, zapraszam.</p>","frontmatter":{"title":"Zmienne i przekazywanie przez referencję w JS","date":"May 06, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-05-06-zmienne-i-referencje/","previous":{"fields":{"slug":"/2019-05-03-jak-twoj-mozg-powstrzymuje-cie-przed-rozwojem/"},"frontmatter":{"title":"Jak twój mózg powstrzymuje cię przed rozwojem"}},"next":null}}